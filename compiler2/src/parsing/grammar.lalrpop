
use super::{ast, LexicalError};
use super::token::{Token, Location};

grammar;

pub Program: ast::Program = {
    <imports:Import*>
    <typedefs:TypeDef*>
    <functions:FunctionDef*>
    => {
        ast::Program { imports, typedefs, functions }
    }
};

Import: ast::Import = {
    <location:@L> "import" <name:Identifier> Newline => {
        ast::Import {
            location,
            name
        }
    }
};

TypeDef: ast::StructDef = {
    StructDef,
}

StructDef: ast::StructDef = {
    "struct" <location:@L> <name:Identifier> ":" Newline Indent <fields:StructDefField+> Dedent => {
        ast::StructDef {
            location,
            name,
            fields,
        }
    }
};

StructDefField: ast::StructDefField = {
    <location:@L> <name:Identifier> ":" <typ:Type> Newline => {
        ast::StructDefField {
            location,
            name,
            typ
        }
    }
};

FunctionDef: ast::FunctionDef = {
    <public:"pub"?> <location:@L> "fn" <name:Identifier>
    "(" <parameters:Comma<Parameter>> ")" <return_type:("->" Type)?> ":"
    Newline <body:Block> => {
        let public = public.is_some();
        let return_type = return_type.map(|r| r.1);
        ast::FunctionDef {
            location,
            name,
            public,
            parameters,
            return_type,
            body
        }
    }
};

Parameter: ast::Parameter = {
    <location:@L> <name:Identifier> ":" <typ:Type> => {
        ast::Parameter {
            location,
            name,
            typ,
        }
    }
};

Statement: ast::Statement = {
    <location:@L> "if" <condition:Condition> ":" Newline <if_true:Block> <if_false:("else" ":" Newline Block)?> => {
        let if_false = if_false.map(|e|e.3);
        ast::Statement {
            location,
            kind: ast::StatementType::If {
                condition,
                if_true,
                if_false,
            }
        }
    },
    <location:@L> "let" <mutable:"mut"?> <name:Identifier> "=" <value:Expression> Newline => {
        let mutable: bool = mutable.is_some();
        ast::Statement {
            location,
            kind: ast::StatementType::Let {
                name,
                mutable,
                value,
            }
        }
    },
    <target:Expression> <location:@L> "=" <value:Expression> Newline => {
        ast::Statement {
            location,
            kind: ast::StatementType::Assignment {
                target,
                value,
            }
        }
    },
    <location:@L> "while" <condition:Condition> ":" Newline <body:Block> => {
        ast::Statement {
            location,
            kind: ast::StatementType::While {
                condition,
                body,
            }
        }
    },
    <location:@L> "for" <name:Identifier> "in" <it:Expression> ":" Newline <body:Block> => {
        ast::Statement {
            location,
            kind: ast::StatementType::For {
                name,
                it,
                body,
            }
        }
    },
    <location:@L> "loop" ":" Newline <body:Block> => {
        ast::Statement {
            location,
            kind: ast::StatementType::Loop {
                body,
            }
        }
    },
    <location:@L> "return" <value:Expression?> Newline => {
        ast::Statement {
            location,
            kind: ast::StatementType::Return { value }
        }
    },
    <location:@L> "break" Newline => {
        ast::Statement {
            location,
            kind: ast::StatementType::Break
        }
    },
    <location:@L> "continue" Newline => {
        ast::Statement {
            location,
            kind: ast::StatementType::Continue
        }
    },
    <location:@L> "pass" Newline => {
        ast::Statement {
            location,
            kind: ast::StatementType::Pass
        }
    },
    <e:Expression> Newline => {
        ast::Statement {
            location: e.location.clone(),
            kind: ast::StatementType::Expression(e)
        }
    },
};

Block: ast::Block = {
    Indent <statements:Statement+> Dedent => statements
};

Condition: ast::Expression = {
    OrTest,
};

OrTest: ast::Expression = {
    <lhs:OrTest> <location:@L> "or" <rhs:AndTest> => {
        let lhs = Box::new(lhs);
        let rhs = Box::new(rhs);
        let op = ast::BinaryOperator::Logic(ast::LogicOperator::Or);
        ast::Expression {
            location,
            kind: ast::ExpressionType::Binop { lhs, op, rhs }
        }
    },
    AndTest,
};

AndTest: ast::Expression = {
    <lhs:AndTest> <location:@L> "and" <rhs:Comparison> => {
        let lhs = Box::new(lhs);
        let rhs = Box::new(rhs);
        let op = ast::BinaryOperator::Logic(ast::LogicOperator::And);
        ast::Expression {
            location,
            kind: ast::ExpressionType::Binop { lhs, op, rhs }
        }
    },
    Comparison,
};

//OrTest: ast::Expression = {
//    <e1:AndTest> "or"
//};

Comparison: ast::Expression = {
    <lhs:Expression> <location:@L> <op:CmpOp> <rhs:Expression> => {
        let lhs = Box::new(lhs);
        let rhs = Box::new(rhs);
        let op = ast::BinaryOperator::Comparison(op);
        ast::Expression {
            location,
            kind: ast::ExpressionType::Binop { lhs, op, rhs }
        }
    }
};

CmpOp: ast::ComparisonOperator = {
    "<" => ast::ComparisonOperator::Lt,
    "<=" => ast::ComparisonOperator::LtEqual,
    ">" => ast::ComparisonOperator::Gt,
    ">=" => ast::ComparisonOperator::GtEqual,
    "==" => ast::ComparisonOperator::Equal,
    "!=" => ast::ComparisonOperator::NotEqual,
};

Expression: ast::Expression = {
    ArithmaticExpression,
};

ArithmaticExpression: ast::Expression = {
    <lhs:ArithmaticExpression> <location:@L> <op:AddOp> <rhs:Term> => {
        let lhs = Box::new(lhs);
        let rhs = Box::new(rhs);
        let op = ast::BinaryOperator::Math(op);
        ast::Expression {
            location,
            kind: ast::ExpressionType::Binop { lhs, op, rhs }
        }
    },
    Term,
};

AddOp: ast::MathOperator = {
    "+" => ast::MathOperator::Add,
    "-" => ast::MathOperator::Sub,
};

Term: ast::Expression = {
    <lhs:Term> <location:@L> <op:MulOp> <rhs:Atom2> => {
        let lhs = Box::new(lhs);
        let rhs = Box::new(rhs);
        let op = ast::BinaryOperator::Math(op);
        ast::Expression {
            location,
            kind: ast::ExpressionType::Binop { lhs, op, rhs }
        }
    },
    Atom2,
};

MulOp: ast::MathOperator = {
    "*" => ast::MathOperator::Mul,
    "/" => ast::MathOperator::Div,
};

Atom2: ast::Expression = {
    Atom,
    <location:@L> <callee:Atom2> "(" <arguments:Comma<Expression>> ")" => {
        let callee = Box::new(callee);
        ast::Expression {
            location,
            kind: ast::ExpressionType::Call {
                callee,
                arguments
            }
        }
    },
    <base:Atom2> <location:@L> "." <attr:Identifier> => {
        ast::Expression {
            location,
            kind: ast::ExpressionType::GetAttr {
                base: Box::new(base),
                attr
            }
        }
    },
};

Atom: ast::Expression = {
    <location:@L> "true" => {
        ast::Expression {
            location,
            kind: ast::ExpressionType::Bool(true)
        }
    },
    <location:@L> "false" => {
        ast::Expression {
            location,
            kind: ast::ExpressionType::Bool(false)
        }
    },
    <location:@L> <s:String> => {
        ast::Expression {
            location,
            kind: ast::ExpressionType::String(s)
        }
    },
    <location:@L> <n:Number> => {
        ast::Expression {
            location,
            kind: ast::ExpressionType::Integer(n)
        }
    },
    <location:@L> <n:FloatingPoint> => {
        ast::Expression {
            location,
            kind: ast::ExpressionType::Float(n)
        }
    },
    <location:@L> <n:Identifier> => {
        ast::Expression {
            location,
            kind: ast::ExpressionType::Identifier(n)
        }
    },
    <location:@L> <name:Identifier> "{" <fields:Comma<StructLiteralField>> "}" => {
        ast::Expression {
            location,
            kind: ast::ExpressionType::StructLiteral { name, fields }
        }
    },
//    <location:@L> <name:Identifier> ":" Newline
//    Indent <fields:Comma<StructLiteralField>> Dedent => {
//        ast::Expression {
//            location,
//            kind: ast::ExpressionType::StructLiteral { name, fields }
//        }
//    },
    "(" <expr:Expression> ")" => expr,
};

Type: ast::Expression = {
    <location:@L> <n:Identifier> => {
        ast::Expression {
            location,
            kind: ast::ExpressionType::Identifier(n)
        }
    },
    <location:@L> <n:Identifier> "<" <t:Type> ">" => {
        ast::Expression {
            location,
            kind: ast::ExpressionType::Identifier(n)
        }
    },
};

StructLiteralField: ast::StructLiteralField = {
    <location:@L> <name:Identifier> ":" <value:Expression> => {
        ast::StructLiteralField {
            location,
            name,
            value
        }
    }
};

#[inline]
Comma<T>: Vec<T> = {
    <items: (<T> ",")*> <last: T?> => {
        let mut items = items;
        items.extend(last);
        items
    }
};

extern {
    type Location = Location;
    type Error = LexicalError;

    enum Token {
        Number => Token::Number { value: <i64> },
        FloatingPoint => Token::FloatingPoint { value: <f64> },
        String => Token::String { value: <String> },
        Identifier => Token::Identifier { value: <String> },
        Indent => Token::Indent,
        Dedent => Token::Dedent,
        Newline => Token::Newline,
        "and" => Token::KeywordAnd,
        "break" => Token::KeywordBreak,
        "continue" => Token::KeywordContinue,
        "else" => Token::KeywordElse,
        "false" => Token::KeywordFalse,
        "fn" => Token::KeywordFn,
        "for" => Token::KeywordFor,
        "if" => Token::KeywordIf,
        "import" => Token::KeywordImport,
        "in" => Token::KeywordIn,
        "let" => Token::KeywordLet,
        "loop" => Token::KeywordLoop,
        "mut" => Token::KeywordMut,
        "or" => Token::KeywordOr,
        "pass" => Token::KeywordPass,
        "pub" => Token::KeywordPub,
        "return" => Token::KeywordReturn,
        "struct" => Token::KeywordStruct,
        "true" => Token::KeywordTrue,
        "while" => Token::KeywordWhile,
        "(" => Token::OpeningParenthesis,
        ")" => Token::ClosingParenthesis,
        "{" => Token::OpeningBrace,
        "}" => Token::ClosingBrace,
        ":" => Token::Colon,
        "," => Token::Comma,
        "." => Token::Dot,
        "->" => Token::Arrow,
        "<" => Token::Less,
        "<=" => Token::LessEqual,
        ">" => Token::Greater,
        ">=" => Token::GreaterEqual,
        "==" => Token::DoubleEqual,
        "=" => Token::Equal,
        "!=" => Token::NotEqual,
        "*" => Token::Asterix,
        "/" => Token::Slash,
        "+" => Token::Plus,
        "-" => Token::Minus,
    }
}
